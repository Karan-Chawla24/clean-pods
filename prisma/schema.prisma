generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]

  @@map("users")
}

model Order {
  id              String      @id @default(cuid())
  merchantOrderId String?     @unique
  phonePeOrderId  String?     @unique
  transactionId   String?
  paymentId       String
  total           Float
  orderDate       DateTime    @default(now())
  userId          String?     @map("user_id")
  customerName    String      @map("customer_name")
  customerEmail   String      @map("customer_email")
  customerPhone   String      @map("customer_phone")
  address         String
  
  // Enhanced payment details for all payment methods
  paymentMode     String?     // UPI_QR, CARD, WALLET, NET_BANKING, etc.
  paymentTransactionId String? // UPI Transaction ID, Card Transaction ID, Wallet Transaction ID, etc.
  utr             String?     // Unique Transaction Reference (for UPI/Bank transfers)
  feeAmount       Float?      @default(0) // Transaction fee charged
  payableAmount   Float?      // Amount actually paid (may differ from total due to offers)
  
  // Bank/Card details (when applicable)
  bankName        String?     // Bank name for UPI/Card payments
  accountType     String?     // SAVINGS, CURRENT, CREDIT_CARD, etc.
  cardLast4       String?     // Last 4 digits of card (for card payments)
  
  // Additional payment metadata
  paymentState    String?     @default("COMPLETED") // COMPLETED, PENDING, FAILED
  paymentTimestamp DateTime?  // When payment was actually processed
  
  items           OrderItem[]
  user            User?       @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  name     String
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id])
}
