name: Secret Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 3 AM UTC
    - cron: "0 3 * * *"

jobs:
  gitleaks:
    name: GitLeaks Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for comprehensive scanning

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for GitLeaks Pro

  trufflehog:
    name: TruffleHog Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --no-verification

  semgrep-secrets:
    name: Semgrep Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep --config=p/security-audit \
                  --config=p/secrets \
                  --config=p/owasp-top-ten \
                  --config=p/javascript \
                  --config=p/typescript \
                  --config=p/react \
                  --config=p/nextjs \
                  --json --output=semgrep-results.json .
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  custom-secret-patterns:
    name: Custom Secret Pattern Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Create detect-secrets config
        run: |
          cat > .secrets.baseline << 'EOF'
          {
            "version": "1.4.0",
            "plugins_used": [
              {
                "name": "ArtifactoryDetector"
              },
              {
                "name": "AWSKeyDetector"
              },
              {
                "name": "AzureStorageKeyDetector"
              },
              {
                "name": "Base64HighEntropyString",
                "limit": 4.5
              },
              {
                "name": "BasicAuthDetector"
              },
              {
                "name": "CloudantDetector"
              },
              {
                "name": "DiscordBotTokenDetector"
              },
              {
                "name": "GitHubTokenDetector"
              },
              {
                "name": "HexHighEntropyString",
                "limit": 3.0
              },
              {
                "name": "IbmCloudIamDetector"
              },
              {
                "name": "IbmCosHmacDetector"
              },
              {
                "name": "JwtTokenDetector"
              },
              {
                "name": "KeywordDetector",
                "keyword_exclude": ""
              },
              {
                "name": "MailchimpDetector"
              },
              {
                "name": "NpmDetector"
              },
              {
                "name": "PrivateKeyDetector"
              },
              {
                "name": "SendGridDetector"
              },
              {
                "name": "SlackDetector"
              },
              {
                "name": "SoftlayerDetector"
              },
              {
                "name": "SquareOAuthDetector"
              },
              {
                "name": "StripeDetector"
              },
              {
                "name": "TwilioKeyDetector"
              }
            ],
            "filters_used": [
              {
                "path": "detect_secrets.filters.allowlist.is_line_allowlisted"
              },
              {
                "path": "detect_secrets.filters.common.is_ignored_due_to_verification_policies",
                "min_level": 2
              },
              {
                "path": "detect_secrets.filters.heuristic.is_indirect_reference"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_likely_id_string"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_lock_file"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_not_alphanumeric_string"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_potential_uuid"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_sequential_string"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_swagger_file"
              },
              {
                "path": "detect_secrets.filters.heuristic.is_templated_secret"
              }
            ],
            "results": {},
            "generated_at": "2024-01-01T00:00:00Z"
          }
          EOF

      - name: Run detect-secrets scan
        run: |
          echo "Running detect-secrets scan..."
          # Create a new baseline scan excluding example files, documentation, config files, and build artifacts
          detect-secrets scan --force-use-all-plugins --exclude-files '\.env\.example$|\.env\..*\.example$|\.md$|\.txt$|package\.json$|package-lock\.json$|\.gitignore$|\.gitleaks\.toml$|tsconfig\.tsbuildinfo$|\.next/|\.vercel/|node_modules/|build/|dist/' > .secrets.baseline.new

          # Check if any secrets were detected (excluding example files)
          if [ -s .secrets.baseline.new ]; then
            # Check if the baseline contains actual results
            if grep -q '"results".*{.*}' .secrets.baseline.new; then
              echo "❌ Secrets detected! Please review the baseline file."
              cat .secrets.baseline.new
              exit 1
            else
              echo "✅ No secrets detected."
            fi
          else
            echo "✅ No secrets detected."
          fi

      - name: Custom pattern search
        run: |
          echo "Running custom secret pattern search..."

          # Search for common secret patterns
          echo "Searching for potential API keys..."
          grep -r -i --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.json" \
            -E "(api[_-]?key|secret[_-]?key|access[_-]?token|auth[_-]?token|private[_-]?key)\s*[:=]\s*['\"][^'\"]{20,}['\"]" . || true

          echo "Searching for hardcoded passwords..."
          grep -r -i --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" \
            -E "(password|passwd|pwd)\s*[:=]\s*['\"][^'\"]{8,}['\"]" . || true

          echo "Searching for database connection strings..."
          grep -r -i --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.env*" \
            -E "(mongodb|mysql|postgres|redis)://[^\s]+" . || true

          echo "Searching for JWT tokens..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" \
            -E "eyJ[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+" . || true

          echo "Searching for AWS keys..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.json" \
            -E "AKIA[0-9A-Z]{16}" . || true

          echo "Searching for Google API keys..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.json" \
            -E "AIza[0-9A-Za-z_-]{35}" . || true

          echo "Searching for Slack tokens..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.json" \
            -E "xox[baprs]-[0-9a-zA-Z]{10,48}" . || true

          echo "Searching for GitHub tokens..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --include="*.json" \
            -E "gh[pousr]_[A-Za-z0-9_]{36}" . || true

          echo "✅ Custom pattern search completed."

  environment-variable-audit:
    name: Environment Variable Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit environment variables
        run: |
          echo "Auditing environment variable usage..."

          # Check for hardcoded environment variables
          echo "Checking for hardcoded environment variables..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" \
            -E "process\.env\.[A-Z_]+\s*=\s*['\"][^'\"]+['\"]" . || true

          # Check for missing .env files in .gitignore
          echo "Checking .gitignore for environment files..."
          if ! grep -q "\.env" .gitignore; then
            echo "⚠️ Warning: .env files may not be properly ignored in .gitignore"
          else
            echo "✅ .env files are properly ignored"
          fi

          # Check for .env files in repository
          echo "Checking for .env files in repository..."
          find . -name ".env*" -not -path "./node_modules/*" -not -name ".env.example" -not -name ".env.vercel.example" | while read -r file; do
            if [ -f "$file" ]; then
              echo "⚠️ Warning: Found environment file in repository: $file"
            fi
          done

          echo "✅ Environment variable audit completed."

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        gitleaks,
        trufflehog,
        semgrep-secrets,
        custom-secret-patterns,
        environment-variable-audit,
      ]
    if: always()

    steps:
      - name: Generate Security Summary
        run: |
          echo "# 🔒 Security Scanning Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitLeaks | ${{ needs.gitleaks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TruffleHog | ${{ needs.trufflehog.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep | ${{ needs.semgrep-secrets.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Custom Patterns | ${{ needs.custom-secret-patterns.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Audit | ${{ needs.environment-variable-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
